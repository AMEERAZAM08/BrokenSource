#!/usr/bin/env python3
import os
import sys
import tempfile
from itertools import count
from pathlib import Path
from subprocess import run as command

# Constants
INSTALL_MAX_ATTEMPTS = 3

# --user no longer works, thanks
os.environ["PIP_BREAK_SYSTEM_PACKAGES"] = "1"

# Write annoying __pycache__ and .pyc on temporary directory
# On Linux it's /tmp under System RAM, so it's brutally fast
os.environ["PYTHONPYCACHEPREFIX"] = str(Path(tempfile.gettempdir())/"pycache")

# Weird KDE wallet or GNOME wallet askings on Linux
if os.name == "posix":
    os.environ["PYTHON_KEYRING_BACKEND"] = "keyring.backends.null.Keyring"

# Current Python executable
PYTHON = sys.executable
POETRY = [PYTHON, "-m", "poetry"]
PIP    = [PYTHON, "-m", "pip"]

# Directories
THIS_FILE = Path(__file__).absolute()
ROOT      = THIS_FILE.parent.absolute()

# Change directory to where the script is
os.chdir(ROOT)

# Make the script executable
if os.name in ["posix", "mac"]:
    os.chmod(THIS_FILE, 0o755)

# Install pip
for attempt in count(1):
    try:
        import pip
        break
    except Exception:
        if attempt == INSTALL_MAX_ATTEMPTS:
            print("Failed to install pip with [python -m ensurepip], please have it available")
            exit(1)

    # FIXME: Do we need any more complex solutions?
    command([sys.executable, "-m", "ensurepip"])

# Install poetry
for attempt in count(0):

    # Installation is hanging
    if attempt == INSTALL_MAX_ATTEMPTS:
        print(f"Attempted {INSTALL_MAX_ATTEMPTS} times to install poetry, but failed")
        print( "Â· Please install it at (https://python-poetry.org/docs/#installation)")
        exit(1)

    # Call poetry --version, command might exit status 1 if it's not installed
    status = command(POETRY + ["--version"], capture_output=True)

    # Poetry is installed, break
    if status.returncode == 0:
        break

    # Install poetry and try again
    command(PIP + ["install", "--user", "poetry"])

# Create, install dependencies on virtual environment
command(POETRY + ["install"])

# Clear screen
try:
    if os.name == "nt":
        command("cls")
    else:
        command("clear")
except Exception:
    pass

# Enter virtual environment
command(POETRY + ["shell"])
